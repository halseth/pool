{
  "swagger": "2.0",
  "info": {
    "title": "trader.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/clm/accounts": {
      "get": {
        "summary": "llm: `accounts list`\nListAccounts returns a list of all accounts known to the trader daemon and\ntheir current state.",
        "operationId": "ListAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcListAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "tags": [
          "Trader"
        ]
      },
      "delete": {
        "summary": "llm: `accounts close`\nCloseAccount closes an account and returns the funds locked in that account\nto the connected lnd node's wallet.",
        "operationId": "CloseAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcCloseAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trader_key",
            "description": "The trader key associated with the account that will be closed.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "output_with_fee.address",
            "description": "The address corresponding to the output.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "output_with_fee.conf_target",
            "description": "The target number of blocks that the transaction should be confirmed in.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "output_with_fee.fee_rate_sat_per_kw",
            "description": "The fee rate, in satoshis per kw, to use for the withdrawal transaction.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Trader"
        ]
      },
      "post": {
        "summary": "llm: `accounts new`\nInitAccount creates a new account with the requested size and expiration,\nfunding it from the wallet of the connected lnd node.",
        "operationId": "InitAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcAccount"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clmrpcInitAccountRequest"
            }
          }
        ],
        "tags": [
          "Trader"
        ]
      }
    },
    "/v1/clm/accounts/deposit": {
      "post": {
        "summary": "llm: `accounts deposit`\nDepositAccount adds more funds from the connected lnd node's wallet to an\naccount.",
        "operationId": "DepositAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcDepositAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clmrpcDepositAccountRequest"
            }
          }
        ],
        "tags": [
          "Trader"
        ]
      }
    },
    "/v1/clm/accounts/quote": {
      "post": {
        "summary": "QuoteAccount gets a fee quote to fund an account of the given size with the\ngiven confirmation target. If the connected lnd wallet doesn't have enough\nbalance to fund an account of the requested size, an error is returned.",
        "operationId": "QuoteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcQuoteAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clmrpcQuoteAccountRequest"
            }
          }
        ],
        "tags": [
          "Trader"
        ]
      }
    },
    "/v1/clm/accounts/recover": {
      "post": {
        "summary": "llm: `accounts recover`\nRecoverAccounts queries the auction server for this trader daemon's accounts\nin case we lost our local account database.",
        "operationId": "RecoverAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcRecoverAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clmrpcRecoverAccountsRequest"
            }
          }
        ],
        "tags": [
          "Trader"
        ]
      }
    },
    "/v1/clm/accounts/withdraw": {
      "post": {
        "summary": "llm: `accounts withdraw`\nWithdrawAccount splits off parts of the account balance into the specified\noutputs while recreating the account with a reduced balance.",
        "operationId": "WithdrawAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcWithdrawAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clmrpcWithdrawAccountRequest"
            }
          }
        ],
        "tags": [
          "Trader"
        ]
      }
    },
    "/v1/clm/batch/snapshot": {
      "get": {
        "summary": "llm: `auction snapshot`\nBatchSnapshot returns the snapshot of a past batch identified by its ID.",
        "operationId": "BatchSnapshot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcBatchSnapshotResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "batch_id",
            "description": "The unique identifier of the batch encoded as a compressed pubkey.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Trader"
        ]
      }
    },
    "/v1/clm/fee": {
      "get": {
        "summary": "llm: `auction fee`\nAuctionFee returns the current auction order execution fee specified by the\nauction server.",
        "operationId": "AuctionFee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcAuctionFeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "tags": [
          "Trader"
        ]
      }
    },
    "/v1/clm/orders": {
      "get": {
        "summary": "llm: `orders list`\nListOrders returns a list of all active and archived orders that are\ncurrently known to the trader daemon.",
        "operationId": "ListOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcListOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "tags": [
          "Trader"
        ]
      },
      "post": {
        "summary": "llm: `orders submit`\nSubmitOrder creates a new ask or bid order and submits for the given account\nand submits it to the auction server for matching.",
        "operationId": "SubmitOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcSubmitOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clmrpcSubmitOrderRequest"
            }
          }
        ],
        "tags": [
          "Trader"
        ]
      }
    },
    "/v1/clm/orders/{order_nonce}": {
      "delete": {
        "summary": "llm: `orders cancel`\nCancelOrder cancels an active order with the auction server to remove it\nfrom future matching.",
        "operationId": "CancelOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcCancelOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "order_nonce",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Trader"
        ]
      }
    },
    "/v1/lsat/tokens": {
      "get": {
        "summary": "* llm: `listauth`\nGetLsatTokens returns all LSAT tokens the daemon ever paid for.",
        "operationId": "GetLsatTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/clmrpcTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "tags": [
          "Trader"
        ]
      }
    }
  },
  "definitions": {
    "InvalidOrderFailReason": {
      "type": "string",
      "enum": [
        "INVALID_AMT"
      ],
      "default": "INVALID_AMT"
    },
    "clmrpcAccount": {
      "type": "object",
      "properties": {
        "trader_key": {
          "type": "string",
          "format": "byte",
          "description": "The identifying component of an account. This is the key used for the trader\nin the 2-of-2 multi-sig construction of an account with an auctioneer."
        },
        "outpoint": {
          "$ref": "#/definitions/clmrpcOutPoint",
          "description": "The current outpoint associated with the account. This will change every\ntime the account has been updated."
        },
        "value": {
          "type": "string",
          "format": "uint64",
          "description": "The current total amount of satoshis in the account."
        },
        "available_balance": {
          "type": "string",
          "format": "uint64",
          "description": "The amount of satoshis in the account that is available, meaning not\nallocated to any oustanding orders."
        },
        "expiration_height": {
          "type": "integer",
          "format": "int64",
          "description": "The height at which the account will expire."
        },
        "state": {
          "$ref": "#/definitions/clmrpcAccountState",
          "description": "The current state of the account."
        },
        "close_txid": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the account's closing transaction, if any."
        }
      }
    },
    "clmrpcAccountState": {
      "type": "string",
      "enum": [
        "PENDING_OPEN",
        "PENDING_UPDATE",
        "OPEN",
        "EXPIRED",
        "PENDING_CLOSED",
        "CLOSED",
        "RECOVERY_FAILED",
        "PENDING_BATCH"
      ],
      "default": "PENDING_OPEN",
      "description": " - PENDING_OPEN: The state of an account when it is pending its confirmation on-chain.\n - PENDING_UPDATE: The state of an account when it has undergone an update on-chain either as\npart of a matched order or a trader modification and it is pending its\nconfirmation on-chain.\n - OPEN: The state of an account once it has confirmed on-chain.\n - EXPIRED: The state of an account once its expiration has been reached and its closing\ntransaction has confirmed.\n - PENDING_CLOSED: The state of an account when we're waiting for the closing transaction of\nan account to confirm that required cooperation with the auctioneer.\n - CLOSED: The state of an account once its closing transaction has confirmed.\n - RECOVERY_FAILED: The state of an account that indicates that the account was attempted to be\nrecovered but failed because the opening transaction wasn't found by lnd.\nThis could be because it was never published or it never confirmed. Then the\nfunds are SAFU and the account can be considered to never have been opened\nin the first place.\n - PENDING_BATCH: The account has recently participated in a batch and is not yet confirmed."
    },
    "clmrpcAsk": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/clmrpcOrder",
          "description": "The common fields shared between both ask and bid order types."
        },
        "max_duration_blocks": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of blocks the liquidity provider is willing to provide\nthe channel funds for."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version of the order format that is used. Will be increased once new\nfeatures are added."
        }
      }
    },
    "clmrpcAskSnapshot": {
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version of the order."
        },
        "max_duration_blocks": {
          "type": "integer",
          "format": "int64",
          "description": "The longest period of time the channel will survive for."
        },
        "rate_fixed": {
          "type": "integer",
          "format": "int64",
          "description": "The true bid price of the order in parts per billion."
        },
        "chan_type": {
          "type": "integer",
          "format": "int64",
          "description": "The channel type to be created."
        }
      }
    },
    "clmrpcAuctionFeeResponse": {
      "type": "object",
      "properties": {
        "execution_fee": {
          "$ref": "#/definitions/clmrpcExecutionFee",
          "description": "The execution fee charged per matched order."
        }
      }
    },
    "clmrpcBatchSnapshotResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version of the batch."
        },
        "batch_id": {
          "type": "string",
          "format": "byte",
          "description": "The unique identifier of the batch."
        },
        "prev_batch_id": {
          "type": "string",
          "format": "byte",
          "description": "The unique identifier of the prior batch."
        },
        "clearing_price_rate": {
          "type": "integer",
          "format": "int64",
          "description": "The uniform clearing price rate in parts per billion of the batch."
        },
        "matched_orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clmrpcMatchedOrderSnapshot"
          },
          "description": "The set of all orders matched in the batch."
        },
        "batch_tx_id": {
          "type": "string",
          "description": "The txid of the batch transaction."
        },
        "batch_tx": {
          "type": "string",
          "format": "byte",
          "description": "The batch transaction including all witness data."
        }
      }
    },
    "clmrpcBid": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/clmrpcOrder",
          "description": "The common fields shared between both ask and bid order types."
        },
        "min_duration_blocks": {
          "type": "integer",
          "format": "int64",
          "description": "Required minimum number of blocks that a channel opened as a result of this\nbid should be kept open."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version of the order format that is used. Will be increased once new\nfeatures are added."
        }
      }
    },
    "clmrpcBidSnapshot": {
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version of the order."
        },
        "min_duration_blocks": {
          "type": "integer",
          "format": "int64",
          "description": "The shortest period of time the matched channel should be allocated for."
        },
        "rate_fixed": {
          "type": "integer",
          "format": "int64",
          "description": "The true bid price of the order in parts per billion."
        },
        "chan_type": {
          "type": "integer",
          "format": "int64",
          "description": "The channel type to be created."
        }
      }
    },
    "clmrpcCancelOrderResponse": {
      "type": "object"
    },
    "clmrpcCloseAccountResponse": {
      "type": "object",
      "properties": {
        "close_txid": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the closing transaction."
        }
      }
    },
    "clmrpcDepositAccountRequest": {
      "type": "object",
      "properties": {
        "trader_key": {
          "type": "string",
          "format": "byte",
          "description": "The trader key associated with the account that funds will be deposited\ninto."
        },
        "amount_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount in satoshis to deposit into the account."
        },
        "fee_rate_sat_per_kw": {
          "type": "string",
          "format": "uint64",
          "description": "The fee rate, in satoshis per kw, to use for the deposit transaction."
        }
      }
    },
    "clmrpcDepositAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/clmrpcAccount",
          "description": "The state of the account after processing the deposit."
        },
        "deposit_txid": {
          "type": "string",
          "format": "byte",
          "description": "The transaction used to deposit funds into the account."
        }
      }
    },
    "clmrpcExecutionFee": {
      "type": "object",
      "properties": {
        "base_fee": {
          "type": "string",
          "format": "uint64",
          "description": "The base fee in satoshis charged per order, regardless of the matched size."
        },
        "fee_rate": {
          "type": "string",
          "format": "uint64",
          "description": "The fee rate in parts per million."
        }
      }
    },
    "clmrpcInitAccountRequest": {
      "type": "object",
      "properties": {
        "account_value": {
          "type": "string",
          "format": "uint64"
        },
        "absolute_height": {
          "type": "integer",
          "format": "int64"
        },
        "relative_height": {
          "type": "integer",
          "format": "int64"
        },
        "conf_target": {
          "type": "integer",
          "format": "int64",
          "description": "The target number of blocks that the transaction should be confirmed in."
        }
      }
    },
    "clmrpcInvalidOrder": {
      "type": "object",
      "properties": {
        "order_nonce": {
          "type": "string",
          "format": "byte"
        },
        "fail_reason": {
          "$ref": "#/definitions/InvalidOrderFailReason"
        },
        "fail_string": {
          "type": "string"
        }
      }
    },
    "clmrpcListAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clmrpcAccount"
          }
        }
      }
    },
    "clmrpcListOrdersResponse": {
      "type": "object",
      "properties": {
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clmrpcAsk"
          }
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clmrpcBid"
          }
        }
      }
    },
    "clmrpcLsatToken": {
      "type": "object",
      "properties": {
        "base_macaroon": {
          "type": "string",
          "format": "byte",
          "description": "*\nThe base macaroon that was baked by the auth server."
        },
        "payment_hash": {
          "type": "string",
          "format": "byte",
          "description": "*\nThe payment hash of the payment that was paid to obtain the token."
        },
        "payment_preimage": {
          "type": "string",
          "format": "byte",
          "description": "*\nThe preimage of the payment hash, knowledge of this is proof that the\npayment has been paid. If the preimage is set to all zeros, this means the\npayment is still pending and the token is not yet fully valid."
        },
        "amount_paid_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\nThe amount of millisatoshis that was paid to get the token."
        },
        "routing_fee_paid_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\nThe amount of millisatoshis paid in routing fee to pay for the token."
        },
        "time_created": {
          "type": "string",
          "format": "int64",
          "description": "*\nThe creation time of the token as UNIX timestamp in seconds."
        },
        "expired": {
          "type": "boolean",
          "format": "boolean",
          "description": "*\nIndicates whether the token is expired or still valid."
        },
        "storage_name": {
          "type": "string",
          "description": "*\nIdentifying attribute of this token in the store. Currently represents the\nfile name of the token where it's stored on the file system."
        }
      }
    },
    "clmrpcMatchedOrderSnapshot": {
      "type": "object",
      "properties": {
        "ask": {
          "$ref": "#/definitions/clmrpcAskSnapshot",
          "description": "The full ask order that was matched."
        },
        "bid": {
          "$ref": "#/definitions/clmrpcBidSnapshot",
          "description": "The full bid order that was matched."
        },
        "matching_rate": {
          "type": "integer",
          "format": "int64",
          "description": "The fixed rate premium that was matched, expressed in parts-ber-billion."
        },
        "total_sats_cleared": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of satoshis that were bought."
        },
        "units_matched": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of units that were matched."
        }
      }
    },
    "clmrpcOrder": {
      "type": "object",
      "properties": {
        "trader_key": {
          "type": "string",
          "format": "byte",
          "description": "The trader's account key of the account that is used for the order."
        },
        "rate_fixed": {
          "type": "integer",
          "format": "int64",
          "description": "Fixed order rate in parts per billion."
        },
        "amt": {
          "type": "string",
          "format": "uint64",
          "description": "Order amount in satoshis."
        },
        "max_batch_fee_rate_sat_per_kw": {
          "type": "string",
          "format": "uint64",
          "description": "Maximum fee rate the trader is willing to pay for the batch transaction,\nexpressed in satoshis per 1000 weight units (sat/KW)."
        },
        "order_nonce": {
          "type": "string",
          "format": "byte",
          "description": "Order nonce, acts as unique order identifier."
        },
        "state": {
          "$ref": "#/definitions/clmrpcOrderState",
          "description": "The state the order currently is in."
        },
        "units": {
          "type": "integer",
          "format": "int64",
          "description": "The number of order units the amount corresponds to."
        },
        "units_unfulfilled": {
          "type": "integer",
          "format": "int64",
          "description": "The number of currently unfilled units of this order. This will be equal to\nthe total amount of units until the order has reached the state PARTIAL_FILL\nor EXECUTED."
        },
        "reserved_value_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The value reserved from the account by this order to ensure the account\ncan pay execution and chain fees in case it gets matched."
        }
      }
    },
    "clmrpcOrderState": {
      "type": "string",
      "enum": [
        "ORDER_SUBMITTED",
        "ORDER_CLEARED",
        "ORDER_PARTIALLY_FILLED",
        "ORDER_EXECUTED",
        "ORDER_CANCELED",
        "ORDER_EXPIRED",
        "ORDER_FAILED"
      ],
      "default": "ORDER_SUBMITTED"
    },
    "clmrpcOutPoint": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "format": "byte",
          "description": "Raw bytes representing the transaction id."
        },
        "output_index": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the output on the transaction."
        }
      }
    },
    "clmrpcOutput": {
      "type": "object",
      "properties": {
        "value_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The value, in satoshis, of the output."
        },
        "address": {
          "type": "string",
          "description": "The address corresponding to the output."
        }
      }
    },
    "clmrpcOutputWithFee": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address corresponding to the output."
        },
        "conf_target": {
          "type": "integer",
          "format": "int64",
          "description": "The target number of blocks that the transaction should be confirmed in."
        },
        "fee_rate_sat_per_kw": {
          "type": "string",
          "format": "uint64",
          "description": "The fee rate, in satoshis per kw, to use for the withdrawal transaction."
        }
      }
    },
    "clmrpcOutputsWithImplicitFee": {
      "type": "object",
      "properties": {
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clmrpcOutput"
          }
        }
      }
    },
    "clmrpcQuoteAccountRequest": {
      "type": "object",
      "properties": {
        "account_value": {
          "type": "string",
          "format": "uint64"
        },
        "conf_target": {
          "type": "integer",
          "format": "int64",
          "description": "The target number of blocks that the transaction should be confirmed in."
        }
      }
    },
    "clmrpcQuoteAccountResponse": {
      "type": "object",
      "properties": {
        "miner_fee_rate_sat_per_kw": {
          "type": "string",
          "format": "uint64"
        },
        "miner_fee_total": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "clmrpcRecoverAccountsRequest": {
      "type": "object"
    },
    "clmrpcRecoverAccountsResponse": {
      "type": "object",
      "properties": {
        "num_recovered_accounts": {
          "type": "integer",
          "format": "int64",
          "description": "The number of accounts that were recovered."
        }
      }
    },
    "clmrpcSubmitOrderRequest": {
      "type": "object",
      "properties": {
        "ask": {
          "$ref": "#/definitions/clmrpcAsk"
        },
        "bid": {
          "$ref": "#/definitions/clmrpcBid"
        }
      }
    },
    "clmrpcSubmitOrderResponse": {
      "type": "object",
      "properties": {
        "invalid_order": {
          "$ref": "#/definitions/clmrpcInvalidOrder",
          "description": "Order failed with the given reason."
        },
        "accepted_order_nonce": {
          "type": "string",
          "format": "byte",
          "description": "The order nonce of the accepted order."
        }
      }
    },
    "clmrpcTokensResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clmrpcLsatToken"
          },
          "description": "*\nList of all tokens the daemon knows of, including old/expired tokens."
        }
      }
    },
    "clmrpcWithdrawAccountRequest": {
      "type": "object",
      "properties": {
        "trader_key": {
          "type": "string",
          "format": "byte",
          "description": "The trader key associated with the account that funds will be withdrawed\nfrom."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clmrpcOutput"
          },
          "description": "The outputs we'll withdraw funds from the account into."
        },
        "fee_rate_sat_per_kw": {
          "type": "string",
          "format": "uint64",
          "description": "The fee rate, in satoshis per kw, to use for the withdrawal transaction."
        }
      }
    },
    "clmrpcWithdrawAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/clmrpcAccount",
          "description": "The state of the account after processing the withdrawal."
        },
        "withdraw_txid": {
          "type": "string",
          "format": "byte",
          "description": "The transaction used to withdraw funds from the account."
        }
      }
    },
    "gatewayruntimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    }
  }
}
